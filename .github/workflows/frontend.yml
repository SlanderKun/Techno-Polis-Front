name: Frontend CI/CD

on:
  push:
    branches: [ "master" ]
  workflow_dispatch: {}

concurrency:
  group: deploy-frontend
  cancel-in-progress: true

permissions:
  contents: read
  packages: write   # пуш образа в GHCR

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE: technopolis-frontend   # имя образа фронта (оставь так, если им так и называется)

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      owner_lower: ${{ steps.lower_owner.outputs.val }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Owner → lowercase (для имени пакета в GHCR)
        id: lower_owner
        run: echo "val=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile           # твой фронтовый Dockerfile в корне
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.lower_owner.outputs.val }}/${{ env.FRONTEND_IMAGE }}:sha-${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ steps.lower_owner.outputs.val }}/${{ env.FRONTEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ steps.lower_owner.outputs.val }}/${{ env.FRONTEND_IMAGE }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      OWNER_LOWER: ${{ needs.build-and-push.outputs.owner_lower }}
      FRONTEND_TAG: sha-${{ github.sha }}
    steps:
      - name: Checkout (нужно, если копируешь compose/nginx)
        uses: actions/checkout@v4

      # Если compose/nginx живут в этом же репо и ты хочешь их обновлять на сервере — оставь.
      # Если на сервере они уже лежат и ты не хочешь их перезатирать — УДАЛИ этот шаг.
      - name: Upload compose & nginx to server (optional)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          source: |           
            ./docker-compose.yml
            ./nginx.conf
          target: ${{ secrets.SERVER_DIR }}
          strip_components: 0
          overwrite: true
          rm: false

      - name: Remote deploy (frontend only)
        uses: appleboy/ssh-action@v1.2.0
        env:
          SERVER_DIR:   ${{ secrets.SERVER_DIR }}
          OWNER_LOWER:  ${{ env.OWNER_LOWER }}
          FRONTEND_TAG: ${{ env.FRONTEND_TAG }}
          REGISTRY:     ${{ env.REGISTRY }}
          FRONTEND_IMAGE: ${{ env.FRONTEND_IMAGE }}
          GHCR_USER:    ${{ secrets.GHCR_READ_USERNAME || github.actor }}
          GHCR_TOKEN:   ${{ secrets.GHCR_READ_TOKEN    || secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          envs: SERVER_DIR,OWNER_LOWER,FRONTEND_TAG,REGISTRY,FRONTEND_IMAGE,GHCR_USER,GHCR_TOKEN
          script: |
            set -Eeuo pipefail
            cd "$SERVER_DIR"

            # 0) GHCR login
            docker login ${REGISTRY} -u "${GHCR_USER}" -p "${GHCR_TOKEN}"

            # 1) аккуратно обновим/создадим deploy.env ТОЛЬКО с фронтовыми переменными
            touch deploy.env
            sed -i '/^FRONTEND_OWNER=/d;/^FRONTEND_TAG=/d' deploy.env
            cat >> deploy.env <<EOF
            FRONTEND_OWNER=${OWNER_LOWER}
            FRONTEND_TAG=${FRONTEND_TAG}
            EOF

            # 2) собираем список compose-файлов
            FILES=""
            for f in docker-compose.yml compose.yml; do [ -f "$f" ] && FILES="$FILES -f $f"; done
            for f in compose.override.yml compose.db.yml; do [ -f "$f" ] && FILES="$FILES -f $f"; done
            [ -n "$FILES" ] || { echo "compose-файлы не найдены в $SERVER_DIR"; exit 1; }

            compose() { docker compose $FILES --env-file .env --env-file deploy.env "$@"; }
            have() { compose config --services | grep -qx "$1"; }

            # 3) подтянуть новые образы фронта/nginx (если есть)
            compose pull --ignore-buildable || true

            # 4) поднять фронт и nginx (если они есть)
            if have frontend; then compose up -d frontend; fi
            if have nginx;    then compose up -d nginx;    fi

            # 5) healthcheck фронта (просто корень и статика)
            curl -fsS http://localhost/ >/dev/null || {
              echo "Frontend healthcheck failed — показываю логи nginx/front:";
              have nginx && compose logs --no-color --tail=200 nginx || true
              have frontend && compose logs --no-color --tail=200 frontend || true
              exit 1
            }
            echo "OK: фронт отвечает по http://localhost/"
